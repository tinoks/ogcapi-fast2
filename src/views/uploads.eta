<!DOCTYPE html>
<html lang="en">

<head>
  <title>Items</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://unpkg.com/ag-grid-community/dist/ag-grid-community.min.js"></script>
  <script src='https://unpkg.com/maplibre-gl@1.15.2/dist/maplibre-gl.js'></script>
  <link href='https://unpkg.com/maplibre-gl@1.15.2/dist/maplibre-gl.css' rel='stylesheet' />
  <script src='https://unpkg.com/@turf/turf@6/turf.min.js'></script>
  <style>
    .highlight {
      background-color: sandybrown !important;
    }
  </style>
</head>

<body class="flex h-screen flex-col max-h-full text-neutral-400">

  <div id="toolbar" class="basis-12	bg-neutral-800 flex">
    <input type="file" id="file" style="display:none;" onchange="uploadFile(this)"/>

    <button onclick="chooseUpload()" class="rounded m-1 p-1 text-sm font-bold text-neutral-200 bg-blue-700 hover:bg-blue-500">ADD ROW</button>
  </div>
  <div id="myGrid" class="grow ag-theme-alpine-dark"></div>

  <script>
    chooseUpload = () => {
      document.getElementById("file").click();
      
    }
    function progressHandler(event) {
          _("loaded_n_total").innerHTML = "Uploaded " + event.loaded + " bytes of " + event.total;
          var percent = Math.round((event.loaded / event.total) * 100);
          _("progressBar").value = percent;
          _("status").innerHTML = percent + "% uploaded... please wait";
      }

      function completeHandler(event) {
          _("status").innerHTML = event.target.responseText;
          _("progressBar").value = 0; //wil clear progress bar after successful upload
      }

      function errorHandler(event) {
          _("status").innerHTML = "Upload Failed";
      }

      function abortHandler(event) {
          _("status").innerHTML = "Upload Aborted";
      }

      function formatBytes(a,b=2,k=1024){with(Math){let d=floor(log(a)/log(k));return 0==a?"0 Bytes":parseFloat((a/pow(k,d)).toFixed(max(0,b)))+" "+["Bytes","KB","MB","GB","TB","PB","EB","ZB","YB"][d]}}

    uploadFile = (e) => {
      let startTime = new Date().getTime();

      let formData = new FormData();
          formData.append("file", e.files[0]);

    var xhr = new XMLHttpRequest();
        xhr.upload.addEventListener("progress", e=> {
          var duration = ( new Date().getTime() - startTime ) / 1000;
          var bps = e.loaded / duration;
          var kbps = formatBytes(bps)
          
          console.log({
            timeRemaining: Math.ceil((e.total-e.loaded)/bps) + "s",  
            procent: Math.round(e.loaded/e.total*100) + "%", 
            speed: kbps + "/s"}
            );
        })
        xhr.addEventListener("loadend", e=>location.reload(), false);
        xhr.addEventListener("error", e=>console.error(e.message), false);
        xhr.addEventListener("abort", e=>console.warn(e), false);
        xhr.open("POST", location.href); 
        xhr.send(formData);


    /*
      fetch(location.href,{
        method: "post",
        body: formData
      }).then(res=>{
        const {status} = res;
        console.log(status)
        if(status == 200) location.reload();
      })

    */

    }


  </script>
  <script>
    let url = new URL(location.href);
    url.searchParams.set("f", "json")
    const updateRow = (e)=>{
      obj = {}
      obj.id = e.data.id
      obj[e.colDef.field] = e.newValue;

      console.log(obj)
      fetch(url.href, {
        method: 'PATCH',                                                              
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify( obj )     
      })
    }

    fetch(url.href)
      .then(e => e.json())
      .then(sources => {
        console.log(sources)
        const columnDefs = Object.keys(sources[0]).map(e => { return { "field": e } });
        console.log(columnDefs)
        // specify the data
        const rowData = sources;

        // let the grid know which columns and what data to use
        const gridOptions = {
          columnDefs: columnDefs,
          rowData: rowData,
          rowSelection: 'multiple',
          defaultColDef: {
            filter: true,
            sortable: true,
            editable: true,
            resizable: true,
          },
          onCellValueChanged: e=> updateRow(e)
        };

        // setup the grid after the page has finished loading
        const gridDiv = document.querySelector('#myGrid');
        window.grid = new agGrid.Grid(gridDiv, gridOptions);


      })

  </script>
</body>

</html>